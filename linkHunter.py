# -*- coding: utf-8 -*-

from urlparse import urlparse
from subprocess import Popen, PIPE
import sys
import re
import os

urlRegEx = r"""(?i)\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\s()<>{}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’])|(?:(?<!@)[a-z0-9]+(?:[.\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\b/?(?!@)))"""
#urlRegEx = 'http[s]?://(?:[a-zA-Z]|[0-9]|$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
redirecting = False
links = []

def findLinks( mail ):
	disc_links = []
	for link in (re.findall(urlRegEx, open(mail, 'r').read())):
		if 'google' not in link and 'youtube' not in link and 'dtu' not in link and 'avast' not in link and 'twitter' not in link and 'facebook' not in link and '.jpg' not in link and '.png' not in link and 'linkedin' not in link:
			if link not in disc_links:
				disc_links.append(link)
	return disc_links

def findRedirections(link):
	print('2: ' + link)
	correctDownload = False
	tmp_links = []
	process = Popen('/usr/bin/wget --tries=1 -T10 "' + link + '" -o wget.log', shell=True, stdout=PIPE).stdout
	wget = process.read()
	log = open('wget.log', 'r').readlines()
	for line in log:
		if 'Saving to' in line:
			wget = line.split(':')[1].translate(None, "`'").strip()
			correctDownload = True
	os.remove('wget.log')
	process.close()
	if correctDownload:
		tmp_links = findLinks(wget)
	return tmp_links

def contentAnalysis(link):
	part_result = ''
	thugprint = False
	process = os.popen('thug -q --output=thug.out ' + link)
	thug = process.read()
	log = open('thug.out', 'r').readlines()
	process.close()
	for line in log:
		if 'ActiveX' in line:
			part_result += (line + '\n')
			thugprint = True
	os.remove('thug.out')
	if not thugprint:
		part_result += 'No suspecious objects at webpage\n'
	return part_result

def passiveAnalysis(link):
	part_result = ''
	ipinfo = (Popen('python /opt/IPinfo/IPinfo.py "' + link + '"', shell=True, stdout=PIPE).stdout).read()
	for line in ipinfo.splitlines():
		part_result += (line + '\n')
	return part_result
